# 문자형 자료형

# 인덱싱/ 슬라이싱
# 인덱스: 문자열을 구성하는, 문자에 붙여진 순서번호, 특정 문자의 위치정보
# 인덱싱: 문자열을 구성하는 하나의 문자에 접근 / 문자형 변수[인덱스 번호]
# 슬라이싱: 문자열을 구성하는 여러개의 문자에 범위로 접근 / 문자형 변수[인덱스1부터: 인덱스2"전"까지]

# 리스트 자료형: 변할수도 있는 데이터들을 나란히 묶어주는 자료형 / 문자열의 친구, 덧셈 곱셈 인덱싱 슬라이싱
# 튜플: 변할 수 없는(변하면 안되는) 데이터들을 나란히 묶어주는 자료형 / 리스트의 가족 
# 리스트는 대괄호 튜플은 소괄호: list= [1,2,3] tuple=(1,2,3)

# 딕셔너리(해쉬)**: "대응"이 되는 데이터를 표현해주는 자료형
# 탐색의 기준,키워드: Key / 탐색의 기준에 대응되는 찾고자 하는 값: Value
# {key1: value1, key2:value2,..} : key는 중복/변화 안됨
#닥셔너리 활용: key를 통해 Value 얻기: 딕셔너리변수[key1]==Value1

# 문자열 (내장함수)

#덧셈
    #str = "멋쟁이사자처럼"
    #str2 = "은 좋은 동아리입니다"
    #print(str+str2)
    #print(str[0])

# [x:y] : x번째 인덱스부터 y인덱스 '전'까지
    #print(str[0:4])

# 문자열의 길이: len(문자열 변수)
    #print(len(str))

#문자열 내에서 특정 문자의 등장 횟수: 문자열 변수.count('특정문자')
    #print(str.count('사'))

# 문자열을 (특정기준으로) 나누기: 문자열 변수.split()
    #print(str.split()) #공백을 기준으로 나누겠다

# 특정 문자 인덱스 찾기: find('문자'), index('문자')
# 찾고자 하는 문자가 없을 때 차이를 가짐
    #print(str.find('사'))


# 리스트(내장함수)

#li =[3,1,'움칫', 4,'둠칫', 5,2]

#인덱스 슬라이싱
    #print (li[2])

#리스트의 길이를 구해주는 함수: len(변수)
    #print(len(li))

#리스트 원소 오름차순 정렬 함수: 변수.sort()
    #sorted = li.sort()
    #print(li/sorted)

# 리스트 내의 특정 원소 인덱스 변환해주는 함수: .index(요소)
    # print(li.index("움칫"))

# 리스트 내의 특정 원소의 갯수 세디: .count(요소)
    #print(li.count(2))


# 딕셔너리(내장함수)

    #pairs = {'잔나비': '뜨거운 여름밤은 가고 남은 건 볼품없지만', '소히': '산책' , '홍크' : '어쩌면'}

# 하나의 키-value 쌍을 추가하는 방법
# 딕셔너리형 변수 [키] = value
    #print(pairs)
    #pairs['스탠딩 에그'] = '휴식'
    #print(pairs)

# 특정 키-value 삭제하는 방법: del 함수
# del 변수[키]
    #del pairs['잔나비']
    #print(pairs)

# key로 value 얻기: 변수.get(키)
    #v= pairs.get('잔나비')
    #print(v)


